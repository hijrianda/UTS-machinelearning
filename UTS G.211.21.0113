{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMATC92GMsuTw5c8wD0Gx6t"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import matplotlib.gridspec as gridspec\n","%matplotlib inline\n","from IPython.display import display_html\n","import statsmodels.formula.api as smf\n","import statsmodels.api as sm\n","\n","from sklearn import model_selection\n","from sklearn import metrics\n","\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.linear_model import LogisticRegression\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import classification_report, accuracy_score\n","import tensorflow as tf\n","import matplotlib.gridspec as gridspec\n","from sklearn.metrics import roc_curve, auc\n","\n","blue_red = ['#74a09e','#86c1b2','#98e2c6','#f3c969','#f2a553', '#d96548', '#c14953']\n","sns.palplot(sns.color_palette(blue_red))\n","\n","# Set Style\n","sns.set_style(\"whitegrid\")\n","sns.despine(left=True, bottom=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":114},"id":"B6e9Y32SDHNm","executionInfo":{"status":"ok","timestamp":1701931966101,"user_tz":-420,"elapsed":12,"user":{"displayName":"Hijrianda Rangga","userId":"10957486179681103758"}},"outputId":"13268c61-c3dc-4ec2-c36a-d1e9957f5a62"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x100 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjIAAABhCAYAAADMSUspAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACsUlEQVR4nO3cMWoVURTH4XPvvEjC46UxIJIqLsJKsgnBNdi7Dy2zBAvtBFeQIr2NCKbX0iZF8ua6BOcFZPjD99W3OByGmR+3mDbGGAUAEKivPQAAwGMJGQAglpABAGIJGQAglpABAGIJGQAglpABAGIJGQAglpABAGJtlh68vrmpLz++1+xHwIudXZzVq5NndX33q+a1hwnRq+py97y+Pb2v0daeJkcbVS9/39eL+VP12q89ToS5prodr+vi9qr6sLOl5jbVz/O3tf34vtr+Ye1xIoxpU3/evKu7D1dVD561Q1x+/fzPM4tvZE6Ojqo3X5ZDtGp13KdqZW9LtWr1ZG7V9PJB2qjat20Nl6yLjeq13+xqtGntUaKMNtXYnlZ1e1usT9VPd1WTnf0P3noAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQCwhAwDEEjIAQKw2xhhrDwEA8BhuZACAWEIGAIglZACAWEIGAIglZACAWEIGAIglZACAWEIGAIglZACAWH8BRFY9TmGLwvQAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["from google.colab import files\n","uploded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"bI7FsX4MDOn3","executionInfo":{"status":"ok","timestamp":1703837396670,"user_tz":-420,"elapsed":12080,"user":{"displayName":"Hijrianda Rangga","userId":"10957486179681103758"}},"outputId":"96d56662-aed9-4df3-eab8-b081f16c21a7"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a493a39f-7fe2-48d0-881a-6e7d0b1f123e\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a493a39f-7fe2-48d0-881a-6e7d0b1f123e\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving CADdataset (1).csv to CADdataset (1).csv\n"]}]},{"cell_type":"code","source":["df1 = df.drop(columns=['Age','Sex'])\n","df1.shape"],"metadata":{"id":"myvToVc9oLIh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.boxplot(df3['Age'], vert=False)\n","plt.ylabel('Sex')\n","plt.xlabel('Age')\n","plt.title('Weight')\n","plt.show()\n","\n","# Calculate summary statistics\n","mean = df3['Age'].mean()\n","std = df3['Age'].std()\n","\n","# Calculate the lower and upper bounds\n","lower_bound = mean - std*2\n","upper_bound = mean + std*2"],"metadata":{"id":"7GxTJhgpDteH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# load the iris dataset\n","iris = load_iris()\n","x = iris.data\n","y = iris.target\n","\n","# split the data into training and testing sets\n","x_train, x_test,\\\n","y_train, y_test = train_test_split(x, y,\n","                                   test_size=0.2,\n","                                   random_state=42)\n","\n","# create a Multinomial logistic regression model\n","multi_logreg = LogisticRegression(multi_class='Age',\n","                                  solver='Sex')\n","multi_logreg.fit(x_train, y_train)\n","\n","# create a One-vs-Rest logistic regression model\n","ovr_logreg = LogisticRegression(multi_class='Age',\n","                                solver='Sex')\n","ovr_logreg.fit(x_train, y_train)"],"metadata":{"id":"cTNE3ZK7DuLh"},"execution_count":null,"outputs":[]}]}